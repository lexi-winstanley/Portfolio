export default {
    projects: [
        {
            id: '12',
            imageSrc: 'images/urbanPrairieWheat.svg',
            imageAlt: '',
            background: '#0072bb',
            textColor: '#f8f7f7',
            mobileBackgroundSrc: 'images/phoneBackLight.svg',
            desktopBackgroundSrc: 'images/desktopLight.svg',
            mobileScreenshot: 'images/urbanPrairieMobile.png',
            desktopScreenshot: 'images/urbanPrairieDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Urban Prairie Homes',
            path: '/urban-prairie-homes',
            motivation: 'The client, a home builder in Fargo, ND, wanted to refresh their current website. The design needed to be responsive and allow for many pictures of the company\'s various floor plans so React was a natural choice to help improve performance. The company also has a modern aesthetic and wanted this to be reflected in the design of the new site.',
            description: 'This is a website created with React for Urban Prairie Homes. The emphasis when designing this website was on a clean aesthetic that would allow the photos from the company\'s work to shine.',
            technicalInfo: '',
            technologies: 'HTML, CSS, JavaScript, React, Amazon S3',
            npmPackages: '',
            futureDev: '',
            role: 'Part of a two person development team. Responsible for design, creation of custom graphics, front end code and integration with back end. Also responsible for all client interactions and communicating client requirements and desires to back end developer.',
            githubLink: '',
            projectLink: 'https://www.urbanprairiehomes.com/',
            javascript: true,
            node: false,
            jQuery: false,
            react: true,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: false,
            api: false
        },
        {
            id: '19',
            imageSrc: 'images/bri-spy.svg',
            imageAlt: 'bri-spy icon',
            background: '#FC354C',
            textColor: '#f8f7f7',
            mobileBackgroundSrc: '',
            desktopBackgroundSrc: '',
            mobileScreenshot: '',
            desktopScreenshot: '',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'bri-SPY',
            path: '/bri-spy',
            motivation: 'To begin learning React Native and create a mobile game that would feature beautiful images and be low stress and fun to play.',
            description: 'bri-SPY is a "Where\'s Waldo?" inspired React Native mobile game in which users pinch-to-zoom and pan to find the hidden character, Brian, then double tap to stop the clock and store their time. If their time beats the stored "Best Time" for that image they are notified.',
            technicalInfo: 'After the application loads the user is presented with a sign-in screen powered by Google Authentication, once the user successfully signs in an API call is made to the backend to check if the user exists in the MongoDB database. If they already exist their information is returned to personalize the user\'s display and allow for storage of their image solve times. If the user does not exist in the database their information is stored. The user can then choose from the library of images and begin playing. Once they click an image and press the "Start" button, a timer begins and the user can pinch-to-zoom and pan around the image in order to find the hidden icon. Once they find the icon they double tap which stops the timer and another API call is made to determine if they have beat the stored best time for that specific image. The user is alerted on the next screen if they achieved a new best time and is presented with the option to return to the image library or continue to the next image. The application also features a menu which opens as an overlay and pauses the timer during game play or allows users the option to exit their current image and return to the main screen where they can chose to sign out.',
            technologies: 'HTML, CSS, JavaScript, React Native, Expo, Node.js, Express, MongoDB, Mongoose, Heroku',
            npmPackages: 'express, mongoose, expo-font, expo-google-app-auth, expo-linear-gradient, react-native-extended stylesheet, react-native-gesture-handler, react-native-reanimated',
            futureDev: 'Continue developing the component which handles pinch-to-zoom, pan and double tap actions during game play to create a smoother experience. Also explore options to create a higher resolution icon without sacrificing background image quality and decrease loading times for images. Allow users the option to create game specific usernames and create leaderboards. Add optional background music and sound effects. Continuing polishing with goal to release on Google Play Store and Apple App Store.',
            role: 'Technical lead of a three person development team. Collaborated with team members regarding application functionality and design. Helped team members as needed to deliver integration with Google Authentication, timer functionality and was responsible for all other code including the backend as well as styling to comply agreed upon design. Also created custom component to handle pinch-to-zoom, pan and double tap actions during game play.',
            githubLink: [
                'https://github.com/lexi-winstanley/bri-SPY',
                'https://github.com/lexi-winstanley/bri-SPYBackEnd'
            ],
            projectLink: '',
            javascript: true,
            node: true,
            jQuery: false,
            react: true,
            reactNative: true,
            mySQL: false,
            mongo: true,
            firebase: false,
            customGraphics: true,
            userAuth: true,
            api: true
        },
        {
            id: '23',
            imageSrc: 'images/somethingBorrowed.svg',
            imageAlt: '',
            background: '#45bce5',
            textColor: '#0F0F0D',
            mobileBackgroundSrc: 'images/phoneBackDark.svg',
            desktopBackgroundSrc: 'images/desktopDark.svg',
            mobileScreenshot: 'images/somethingBorrowedMobile.png',
            desktopScreenshot: 'images/somethingBorrowedDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Something Borrowed',
            path: '/something-borrowed',
            motivation: 'The motivation behind this project was to reduce waste and help save money by borrowing items you may need only once or twice from friends.',
            description: 'Something Borrowed is a web application that facilitates friend-to-friend lending to help users save money and reduce wasteful purchasing of items to be used only once or twice. Once users create an account they can create or request to join existing groups and add items they are willing to lend out to the members of those groups. They can view the items that the other group members have added and make requests to borrow them. The requester and item owner can then message back and forth until a location and time for pickup are agreed upon and then the owner can confirm the request. If a mutually agreeable location and time cannot be found the owner can deny the request or the requester can delete it.',
            technicalInfo: 'This application is organized using the Model-View-Controller (MVC) design pattern. Sequelize is used to handle MySQL connection and queries. Once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',
            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',
            npmPackages: 'express, express-handlebars, mysql2, sequelize, google-auth-library, nodemailer, nodemon, dotenv, cookie-parser',
            futureDev: 'Some ideas for future development include integration with Google Maps and Calendar so that users can suggest locations and have calendar invites sent out automatically once exchange details have been agreed upon. Another idea would be to integrate with PayPal or another money handling service and allow users to set a deposit for borrowing expensive items.',
            role: 'Sole developer responsible for design, code and creation of custom graphics.',
            githubLink: 'https://github.com/lexi-winstanley/somethingBorrowed',
            projectLink: 'https://something---borrowed.herokuapp.com/',
            javascript: true,
            node: true,
            jQuery: true,
            react: false,
            reactNative: false,
            mySQL: true,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: true,
            api: true
        },
        {
            id: '9',
            imageSrc: 'images/packIt.svg',
            imageAlt: '',
            background: '#680a4d',
            textColor: '#f8f7f7',
            mobileBackgroundSrc: 'images/phoneBackLight.svg',
            desktopBackgroundSrc: 'images/desktopLight.svg',
            mobileScreenshot: 'images/packItMobile.png',
            desktopScreenshot: 'images/packItDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Pack It!',
            path: '/pack-it',
            motivation: 'Our motivation to develop this application was that we wanted to create something that would simplify an aspect of travel. In our experience, the most stressful part of a trip is generally the days leading up to it when you’re pressed for time and trying to remember and complete all the last minute to-dos at work or home, including packing your suitcases. We’ve all made lists of items to pack for trips before and this seemed like an area that could be streamlined as we often end up packing the same items trip after trip. We wanted to be able to dynamically generate a suggested list that the user could then further customize and save for later.',
            description: 'When a user navigates to Pack It! they are presented with a landing page where they input a destination and trip duration. These inputs are captured and the location is used to call the Open Weather Map API which returns forecast results for the next 120 hours (about five days) in three hour increments and the latitude and longitude of the forecast location. We then use that latitude and longitude to call the Webcams.Travel API which returns webcams within a 250 km (approximately 155 mile) radius which can help inform the user\'s packing plans. We display up to six webcam stills on our results page which users can click to navigate to the live stream. Using jQuery we loop through the forecast results from Open Weather Map and get the highest maximum temperature and lowest minimum temperature to display for each day. The weather description used is the first that occurs. The average high temperature over the entire forecast period is used to determine whether a warm weather or cold weather packing list should be suggested. The list display is then generated from an array. Once the user gets their results they can customize their list as desired and choose to create an account in order to save their list to our Firebase database. We use Firebase user authentication to create an email/password login and then a new node is created in our root directory using the user ID. The next time the user visits Pack It! they can log in and retrieve their saved list.',
            technicalInfo: 'This application is written with jQuery. User inputs are captured and used in API calls. The results of these calls are looped through and acted on as needed to generate the appropriate sections of HTML and add them to the page. Arrays are used to hold the packing list items and edited as the user adds or deletes items. If the user chooses to make an account and save their list the array is saved to the Firebase database for retrieval later.',
            technologies: 'HTML, CSS, Materialize, JavaScript, jQuery, OpenWeatherMap API, Webcams.Travel API, Firebase',
            npmPackages: '',
            futureDev: '',
            role: 'Part of a three person developer team. Contributed to design, responsible for altering as needed to make responsive. Authored code to capture user inputs, call Open Weather Map API, parse latitude and longitude to be used in call to Webcams.Travel API, average temperature data and serve appropriate packing list. Created custom weather graphics and favicon.',
            githubLink: 'https://github.com/lexi-winstanley/packIt',
            projectLink: 'https://lexi-winstanley.github.io/packIt/',
            javascript: true,
            node: false,
            jQuery: true,
            react: false,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: true,
            customGraphics: true,
            userAuth: true,
            api: true
        },
        {
            id: '16',
            imageSrc: 'images/threeScoreDev.svg',
            imageAlt: 'compass inspired black and green Three Score Development logo',
            background: '#cbc5ef',
            textColor: '#0F0F0D',
            mobileBackgroundSrc: 'images/phoneBackDark.svg',
            desktopBackgroundSrc: 'images/desktopDark.svg',
            mobileScreenshot: 'images/threeScoreDevMobile.png',
            desktopScreenshot: 'images/threeScoreDevDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Three Score Development',
            path: '/three-score-development',
            motivation: '',
            description: '',
            technicalInfo: '',
            technologies: 'HTML, ThymeLeaf, CSS, Acuity Scheduling integration and customization, Java',
            npmPackages: '',
            futureDev: '',
            role: 'Part of a two member development team. Responsible for design, HTML/Thymeleaf, CSS, client interactions and creation of custom graphics. Also completed integration with Acuity Scheduling and customized appearance with CSS.',
            githubLink: '',
            projectLink: 'https://www.threescoredevelopment.com/',
            javascript: false,
            node: false,
            jQuery: false,
            react: false,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: false,
            api: false
        },
        {
            id: '20',
            imageSrc: 'images/chapterToo.svg',
            imageAlt: 'Chapter Too white and grey sailboat icon',
            background: '#041232',
            textColor: '#f8f7f7',
            mobileBackgroundSrc: 'images/phoneBackLight.svg',
            desktopBackgroundSrc: 'images/desktopLight.svg',
            mobileScreenshot: 'images/chapterTooMobile.png',
            desktopScreenshot: 'images/chapterTooDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Chapter Too Travel Blog',
            path: '/chapter-too',
            motivation: '',
            description: '',
            technicalInfo: '',
            technologies: 'HTML, CSS, Java',
            npmPackages: '',
            futureDev: '',
            role: 'Part of a two person development team. Responsible for design, HTML/Thymeleaf and CSS, client interactions and creation of custom graphics.',
            githubLink: '',
            projectLink: 'https://www.mvchaptertoo.com/',
            javascript: false,
            node: false,
            jQuery: false,
            react: false,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: false,
            api: false
        },
        {
            id: '24',
            imageSrc: 'images/threeScoreRub.svg',
            imageAlt: 'Three Score Rub Original jar icon',
            background: '#0072bb',
            textColor: '#f8f7f7',
            mobileBackgroundSrc: 'images/phoneBackLight.svg',
            desktopBackgroundSrc: 'images/desktopLight.svg',
            mobileScreenshot: 'images/threeScoreRubMobile.png',
            desktopScreenshot: 'images/threeScoreRubDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Three Score Rub',
            path: '/three-score-rub',
            motivation: '',
            description: '',
            technicalInfo: '',
            technologies: 'HTML, Thymeleaf, CSS, Java',
            npmPackages: '',
            futureDev: '',
            role: 'Part of a two person development team. Responsible for design, HTML/Thymeleaf and CSS, client interactions and creation of custom graphics.',
            githubLink: '',
            projectLink: 'https://threescorerub.com/',
            javascript: true,
            node: false,
            jQuery: false,
            react: false,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: false,
            api: false
        },
        {
            id: '13',
            imageSrc: 'images/swissFavicon.svg',
            imageAlt: 'polaroid icon with Swiss cross',
            background: '#b5ca30',
            textColor: '#0F0F0D',
            mobileBackgroundSrc: 'images/phoneBackDark.svg',
            desktopBackgroundSrc: 'images/desktopDark.svg',
            mobileScreenshot: 'images/swissMemoryMobile.png',
            desktopScreenshot: 'images/swissMemoryDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Swiss Memory Game',
            path: '/swiss-memory-game',
            motivation: '',
            description: '',
            technicalInfo: '',
            technologies: 'HTML, CSS, JavaScript, React',
            npmPackages: 'create-react-app',
            futureDev: '',
            role: 'Sole developer responsible for design, code and creation of custom graphics.',
            githubLink: 'https://github.com/lexi-winstanley/swissMemoryGame',
            projectLink: 'https://lexi-winstanley.github.io/swissMemoryGame/',
            javascript: true,
            node: false,
            jQuery: false,
            react: true,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: false,
            api: false
        },
        {
            id: '29',
            imageSrc: 'images/burger.svg',
            imageAlt: 'double decker burger icon',
            background: '#0072bb',
            textColor: '#f8f7f7',
            mobileBackgroundSrc: 'images/phoneBackLight.svg',
            desktopBackgroundSrc: 'images/desktopLight.svg',
            mobileScreenshot: 'images/burgerMobile.png',
            desktopScreenshot: 'images/burgerDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Eat Da Burger',
            path: '/eat-da-burger',
            motivation: '',
            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \'Ready to Eat\' section and devoured burgers in the \'Devoured\' section. There is also a form to allow them to input the name of new burgers they\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as \'Ready to Eat\' and the page is reloaded so the burger is displayed in the appropriate section with a \'Devour It!\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \'Devoured\' section of the page.',
            technicalInfo: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',
            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',
            npmPackages: 'express, express-handlebars, mysql',
            futureDev: '',
            role: 'Sole developer responsible for design, code and creation of custom graphics.',
            githubLink: 'https://github.com/lexi-winstanley/burgerLog',
            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',
            javascript: true,
            node: true,
            jQuery: true,
            react: false,
            reactNative: false,
            mySQL: true,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: false,
            api: true
        },
        {
            id: '10',
            imageSrc: 'images/gifGenerator.svg',
            imageAlt: 'gif generator icon',
            background: '#041232',
            textColor: '#f8f7f7',
            mobileBackgroundSrc: 'images/phoneBackLight.svg',
            desktopBackgroundSrc: 'images/desktopLight.svg',
            mobileScreenshot: 'images/gifMobile.png',
            desktopScreenshot: 'images/gifDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'GIF Generator',
            path: '/gif-generator',
            motivation: '',
            description: 'Users press the buttons to search for animal GIFs. They can add their own buttons to create custom searches. Each search will return 10 GIFs but pressing the \'Get More\' button after the initial search will return additional GIFs in the category. Users can expand or collapse the favorites section by pressing the arrow and pressing any \'Add to Favorites\' button will add that GIF to the section.',
            technicalInfo: 'This application uses jQuery to populate sections of the results page with GIFs. Logic was written to capture user text input to create new buttons that can then be clicked (click event listeners) to call the Giphy API with the search query. A response is received from the Giphy API and the JSON data is used to display the GIFs on the page. If the API call is not successful, an error is shown.',
            technologies: 'HTML, CSS, JavaScript, jQuery, Giphy API',
            npmPackages: '',
            futureDev: '',
            role: 'Sole developer responsible for design, code and creation of custom graphics.',
            githubLink: 'https://github.com/lexi-winstanley/giphyGenerator',
            projectLink: 'https://lexi-winstanley.github.io/GiphyGenerator/',
            javascript: true,
            node: false,
            jQuery: true,
            react: false,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: false,
            api: true
        },
        {
            id: '15',
            imageSrc: 'images/friendFinder.svg',
            imageAlt: 'friend finder icon',
            background: '#680a4d',
            textColor: '#f8f7f7',
            mobileBackgroundSrc: 'images/phoneBackLight.svg',
            desktopBackgroundSrc: 'images/desktopLight.svg',
            mobileScreenshot: 'images/friendFinderMobile.png',
            desktopScreenshot: 'images/friendFinderDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Friend Finder',
            path: '/friend-finder',
            motivation: '',
            description: 'Friend Finder is a web application deployed with Heroku. Users answer survey questions and are then based on their answers are shown their best stored friend match. The user is first brought to a landing page that has a button linking them to the survey page where they will be asked to answer a few questions. Once they submit the form, their answers are captured and compared with stored friends\' data. The stored friend with the lowest absolute difference from the scores will be returned as the user\'s best possible friend match.',
            technicalInfo: 'This application is organized into an app directory which is subdivided into data, public and routing folders. The data folder holds the stored friends data as an array of objects, the public folder holds the HTML and images while the routing folder holds files defining the API and HTML routes. A server file initializes the server and brings together the other resources as necessary to enable the application\'s functionality.',
            technologies: 'HTML, Bootstrap, JavaScript, jQuery, Node.js, Express, Heroku',
            npmPackages: 'express, path',
            futureDev: '',
            role: 'Sole developer responsible for design, code and creation of custom graphics.',
            githubLink: 'https://github.com/lexi-winstanley/friendFinder',
            projectLink: 'https://afternoon-falls-93974.herokuapp.com/',
            javascript: true,
            node: true,
            jQuery: true,
            react: false,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: false,
            api: true
        },
        {
            id: '22',
            imageSrc: 'images/train.svg',
            imageAlt: 'olive green, black and grey train logo',
            background: '#cbc5ef',
            textColor: '#0F0F0D',
            mobileBackgroundSrc: 'images/phoneBackDark.svg',
            desktopBackgroundSrc: 'images/desktopDark.svg',
            mobileScreenshot: 'images/trainMobile.png',
            desktopScreenshot: 'images/trainDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Train Schedule',
            path: '/train-schedule',
            motivation: '',
            description: 'This web application allows visitors to view a table with the names, destinations, frequencies, next arrivals and minutes to next arrivals of current trains stored in its Firebase database. The next arrival and minutes to next arrival columns are updated every 60 seconds. Visitors can also use the form on the page to add new trains to the database. They must provide the name, destination, frequency, and first arrival time. Next arrival time and minutes to next arrival time will be calculated upon data retrieval.',
            technicalInfo: 'Logic was written to capture user inputs and store them in Firebase database. A function is set to run on any changes to the database and then use values to calculate the minutes to next train arrival and next time arriving using the Moment.js library. These values are then dynamically displayed to the HTML in a table.',
            technologies: 'HTML, CSS, JavaScript, jQuery, Firebase',
            npmPackages: '',
            futureDev: '',
            role: 'Sole developer responsible for design, code and creation of custom graphics.',
            githubLink: 'https://github.com/lexi-winstanley/trainSchedule',
            projectLink: 'https://lexi-winstanley.github.io/trainSchedule/',
            javascript: true,
            node: false,
            jQuery: true,
            react: false,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: true,
            customGraphics: true,
            userAuth: false,
            api: false
        },
        {
            id: '26',
            imageSrc: 'images/sawblade.svg',
            imageAlt: 'saw blade icon',
            background: '#0cb2ba',
            textColor: '#f8f7f7',
            mobileBackgroundSrc: 'images/phoneBackLight.svg',
            desktopBackgroundSrc: 'images/desktopLight.svg',
            mobileScreenshot: 'images/woodworkingMobile.png',
            desktopScreenshot: 'images/woodworkingDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Woodworking Trivia',
            path: '/woodworking-trivia',
            motivation: '',
            description: 'This trivia game is about woodworking. On page load an instruction screen is displayed. Once the player clicks the "Start Game" button the first question appears. The player is given a certain amount of time in which to answer the question. After they answer or time runs out, the correct answer will be confirmed or shown and a new question will load. The timer will reset each time a new question appears. Once the player has gone through all the questions a screen will display the total correct/incorrect answers. Not answering in the allotted time counts as an incorrect answer.',
            technicalInfo: 'Timeout functions and intervals are used to display the questions and a countdown of time to answer. Once the user answers a page is shown that reveals the correct answer. After a set amount of time the next question is shown and a new countdown begins. Once all the questions have been answered a summary screen is shown and the game is over.',
            technologies: 'HTML, CSS, JavaScript',
            npmPackages: '',
            futureDev: '',
            role: 'Sole developer responsible for design, code and creation of custom graphics.',
            githubLink: 'https://github.com/lexi-winstanley/woodworkingTrivia',
            projectLink: 'https://lexi-winstanley.github.io/woodworkingTrivia/',
            javascript: true,
            node: false,
            jQuery: false,
            react: false,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: false,
            api: false
        },
        {
            id: '8',
            imageSrc: 'images/pawPrint.svg',
            imageAlt: 'dog paw print icon',
            background: '#b5ca30',
            textColor: '#0F0F0D',
            mobileBackgroundSrc: 'images/phoneBackDark.svg',
            desktopBackgroundSrc: 'images/desktopDark.svg',
            mobileScreenshot: 'images/dogBreedMobile.png',
            desktopScreenshot: 'images/dogBreedDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Guess that Dog Breed Game',
            path: '/guess-that-dog-breed',
            motivation: '',
            description: 'In this application the computer randomly chooses a word from a predefined array of dog breeds, then displays underscores corresponding to the number of letters. The user then presses keys to guess letters that may be in the word. If they guess a letter that is in the word the appropriate blanks are changed to that letter and the number of letters remaining in the word decreases. If they guess a letter that is not in the word it is displayed on the page as an incorrect letter guessed and the number of guesses remaining decreases. \nThe user is allowed 10 incorrect guesses, if they do not guess all the letters in the word before they run out of guesses the number of losses is incremented and the game resets. If they guess the word correctly then the number of wins is incremented and the game resets. \nWhen the game resets the computer randomly chooses a new word from the remaining dog breeds in the array and the incorrect guesses are cleared and number of guesses remaining set back to 10. Each time the computer selects a new word the picture is updated to display a dog of the previous breed (i.e. if the previous word was "poodle" when the computer selects a new word the picture will update to be of a poodle). The computer will go through each word in the array once before beginning to repeat words. There are 20 unique dog breeds in the game.',
            technicalInfo: 'This application is written with JavaScript. Arrays are used to hold possible words, letters guessed incorrectly and correctly, underscores corresponding to current word and words that have been used since page load. Loops, variables and event listeners (on key up) are used to carry out the logic to determine what the user is guessing and if that guess is correct or not as well as update the HTML elements.',
            technologies: 'HTML, CSS, JavaScript',
            npmPackages: '',
            futureDev: '',
            role: 'Sole developer responsible for design, code and creation of custom graphics.',
            githubLink: 'https://github.com/lexi-winstanley/DogBreedGuessingGame',
            projectLink: 'https://lexi-winstanley.github.io/DogBreedGuessingGame/',
            javascript: true,
            node: false,
            jQuery: false,
            react: false,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: false,
            api: false
        },
        {
            id: '17',
            imageSrc: 'images/greenCrystal.svg',
            imageAlt: 'green crystal icon',
            background: '#FC354C',
            textColor: '#f8f7f7',
            mobileBackgroundSrc: 'images/phoneBackLight.svg',
            desktopBackgroundSrc: 'images/desktopLight.svg',
            mobileScreenshot: 'images/crystalMobile.png',
            desktopScreenshot: 'images/crystalDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Crystal Counting',
            path: '/crystal-counting',
            motivation: '',
            description: 'This is a JavaScript game utilizing the jQuery library. At the start of the game a target score between 19-120 will be randomly generated. Each of the four crystals will also be assigned a random value 1-12. The crystal values will not be displayed to the player. \nEach time a crystal is clicked its value will be added to the current score. The object of the game is to click on the crystals in such a way that the sum of all the crystals clicked equals the target score; this will constitute a win for the player which will be displayed at the bottom of the page. If the current score goes over the target score the game ends and the player loses; the losses display at the bottom of the page will be incremented. \nOnce the player wins or loses a new target score and crystal values will be generated.',
            technicalInfo: '',
            technologies: 'HTML, CSS, JavaScript, jQuery',
            npmPackages: '',
            futureDev: '',
            role: 'Sole developer responsible for design, code and creation of custom graphics.',
            githubLink: 'https://github.com/lexi-winstanley/crystalCountingGame',
            projectLink: 'https://lexi-winstanley.github.io/crystalCountingGame/',
            javascript: true,
            node: false,
            jQuery: true,
            react: false,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: false,
            api: false
        },
        {
            id: '27',
            imageSrc: 'images/crystalBall.svg',
            imageAlt: 'crystal ball icon',
            background: '#680a4d',
            textColor: '#f8f7f7',
            mobileBackgroundSrc: 'images/phoneBackLight.svg',
            desktopBackgroundSrc: 'images/desktopLight.svg',
            mobileScreenshot: 'images/letterGuessMobile.png',
            desktopScreenshot: 'images/letterGuessDesktop.png',
            mobileScreenshotAlt: '',
            desktopScreenshotAlt: '',
            title: 'Letter Guessing Game',
            path: '/letter-guessing-game',
            motivation: '',
            description: 'This is a JavaScript game in which the computer will choose a letter from the alphabet and the user will then press keys to guess what the letter is. The user will have 9 tries to guess the letter correctly. Incorrect guesses will display on the page and the number of remaining guesses will decrease. If the user is not able to guess the letter in 9 tries the number of losses will increment and the display will update. If the user guesses the letter correctly, the number of wins will increment and the display will update. The computer then chooses a new letter and the number of guesses remaining resets to 9 and the incorrect guesses are cleared.',
            technicalInfo: '',
            technologies: 'HTML, CSS, JavaScript',
            npmPackages: '',
            futureDev: '',
            role: 'Sole developer responsible for design, code and creation of custom graphics.',
            githubLink: 'https://github.com/lexi-winstanley/letterGuessingGame',
            projectLink: 'https://lexi-winstanley.github.io/letterGuessingGame/',
            javascript: true,
            node: false,
            jQuery: false,
            react: false,
            reactNative: false,
            mySQL: false,
            mongo: false,
            firebase: false,
            customGraphics: true,
            userAuth: false,
            api: false
        }
    ]
}