{"version":3,"sources":["components/Wrapper/index.js","components/Logo/index.js","components/MenuItem/index.js","components/NavigationMenu/index.js","components/IntroStatement/index.js","components/Header/index.js","components/FlexContainer/index.js","constants/hexTiles.js","components/Hexagon/index.js","components/HexagonGrid/index.js","components/ResumeInfoBar/index.js","components/FlexColumnContainer/index.js","components/EqualColumn/index.js","constants/projects.js","components/ProjectPage/index.js","components/PageInfoSection/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Logo","src","alt","MenuItem","to","linkPath","linkTitle","NavigationMenu","IntroStatement","Header","FlexContainer","hexTiles","id","imageSrc","imageAlt","background","textColor","title","path","Hexagon","styles","importedColor","backgroundColor","importedTextColor","color","style","link","HexagonGrid","content","map","hexTile","key","ResumeInfoBar","FlexColumnContainer","EqualColumn","projects","description","organization","technologies","npmPackages","role","githubLink","projectLink","projectImageSrc","projectImageAlt","ProjectPage","currentProject","project","desiredProject","toLowerCase","i","projectList","length","console","log","findProject","useParams","importedButtonColors","importedArrowColors","borderRightColor","href","PageInfoSection","pageTitle","pageInfo","App","exact","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qiBASeA,G,YANC,SAAAC,GACZ,OACI,yBAAKC,UAAU,WAAWD,EAAME,YCMzBC,G,YARF,SAAAH,GACT,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,iBAAiBG,IAAI,sBAAsBC,IAAI,6D,qBCI3DC,EANE,SAAAN,GACb,OACI,wBAAIC,UAAU,YAAW,kBAAC,IAAD,CAAMM,GAAIP,EAAMQ,UAAWR,EAAMS,aCUnDC,EAZQ,SAAAV,GACnB,OACI,wBAAIC,UAAU,kBACV,kBAAC,EAAD,CAAUQ,UAAU,OAAOD,SAAS,MACpC,kBAAC,EAAD,CAAUC,UAAU,QAAQD,SAAS,WACrC,kBAAC,EAAD,CAAUC,UAAU,WAAWD,SAAS,cACxC,kBAAC,EAAD,CAAUC,UAAU,UAAUD,SAAS,aACtCR,EAAME,WCEJS,G,MARQ,SAAAX,GACnB,OACI,yBAAKC,UAAU,kBACX,wBAAIA,UAAU,aAAd,kUCUGW,EAZA,SAAAZ,GACX,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,kBAAC,EAAD,QCJGY,G,MANO,SAAAb,GAClB,OACI,yBAAKC,UAAU,iBAAiBD,EAAME,YCL/B,G,MAAA,CACXY,SAAU,CACN,CAEIC,GAAI,IACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CAEIN,GAAI,IACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CAEIN,GAAI,IACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CAEIN,GAAI,IACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CACIN,GAAI,IACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CACIN,GAAI,IACJC,SAAU,oBACVC,SAAU,4BACVC,WAAY,UACZC,UAAW,UACXC,MAAO,gBACPC,KAAM,kBAEV,CAEIN,GAAI,IACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CACIN,GAAI,IACJC,SAAU,sBACVC,SAAU,qBACVC,WAAY,UACZC,UAAW,UACXC,MAAO,0BACPC,KAAM,KAEV,CACIN,GAAI,IACJC,SAAU,oBACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,WACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,0BACVC,SAAU,qBACVC,WAAY,UACZC,UAAW,UACXC,MAAO,gBACPC,KAAM,KAEV,CAEIN,GAAI,KACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,+BACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,sBACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,0BACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,oBACPC,KAAM,KAEV,CAEIN,GAAI,KACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,0BACVC,SAAU,qBACVC,WAAY,UACZC,UAAW,UACXC,MAAO,gBACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,2BACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,0BACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,0BACVC,SAAU,qBACVC,WAAY,UACZC,UAAW,UACXC,MAAO,mBACPC,KAAM,KAEV,CAEIN,GAAI,KACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,qBACVC,SAAU,eACVC,WAAY,UACZC,UAAW,UACXC,MAAO,UACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,wBACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,0BACPC,KAAM,KAEV,CAEIN,GAAI,KACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,mBACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,iBACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,+BACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,qBACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,2BACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,kBACPC,KAAM,KAEV,CAEIN,GAAI,KACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,sBACVC,SAAU,iBACVC,WAAY,UACZC,UAAW,UACXC,MAAO,qBACPC,KAAM,KAEV,CACIN,GAAI,KACJC,SAAU,yBACVC,SAAU,oBACVC,WAAY,UACZC,UAAW,UACXC,MAAO,uBACPC,KAAM,KAEV,CAEIN,GAAI,KACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CAEIN,GAAI,KACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CAEIN,GAAI,KACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,KAEV,CAEIN,GAAI,KACJC,SAAU,GACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,GACPC,KAAM,QCtQHC,G,MA3BC,SAAAtB,GACZ,IAAMuB,EAAS,CACXC,cAAe,CACXC,gBAAiBzB,EAAMkB,YAE3BQ,kBAAmB,CACfC,MAAO3B,EAAMmB,YAGrB,OACI,yBAAKlB,UAAU,oBACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,mBAAmB2B,MAAOL,EAAOC,eAC5C,kBAAC,IAAD,CAAMjB,GAAIP,EAAM6B,KAAMd,GAAIf,EAAMe,GAAId,UAAU,YAC1C,wBAAIA,UAAU,WAAW2B,MAAOL,EAAOG,mBAClC1B,EAAMoB,OAEX,yBAAKnB,UAAU,qBACX,yBAAKA,UAAU,WAAWG,IAAKJ,EAAMgB,SAAUX,IAAKL,EAAMiB,kBCGvEa,EApBK,SAAA9B,GAChB,IAAI+B,EAAUjB,EAASA,SAASkB,KAAI,SAAAC,GAAO,OACvC,kBAAC,EAAD,CACIlB,GAAIkB,EAAQlB,GACZmB,IAAKD,EAAQlB,GACbC,SAAUiB,EAAQjB,SAClBC,SAAUgB,EAAQhB,SAClBC,WAAYe,EAAQf,WACpBC,UAAWc,EAAQd,UACnBC,MAAOa,EAAQb,MACfS,KAAMI,EAAQZ,UAGtB,OACI,yBAAKpB,UAAU,eACV8B,ICXEI,G,MANO,SAAAnC,GAClB,OACI,yBAAKC,UAAU,uBAAuBD,EAAME,Y,OCIrCkC,G,YANa,SAAApC,GACxB,OACI,yBAAKC,UAAU,uBAAuBD,EAAME,YCIrCmC,G,MANK,SAAArC,GAChB,OACI,yBAAKC,UAAU,eAAeD,EAAME,YCL7B,GACXoC,SAAU,CACN,CACIvB,GAAI,IACJC,SAAU,oBACVC,SAAU,4BACVC,WAAY,UACZC,UAAW,UACXC,MAAO,gBACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,IACJC,SAAU,sBACVC,SAAU,qBACVC,WAAY,UACZC,UAAW,UACXC,MAAO,0BACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,IACJC,SAAU,oBACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,WACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,0BACVC,SAAU,qBACVC,WAAY,UACZC,UAAW,UACXC,MAAO,gBACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,+BACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,sBACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,0BACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,oBACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,0BACVC,SAAU,qBACVC,WAAY,UACZC,UAAW,UACXC,MAAO,gBACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,2BACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,0BACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,0BACVC,SAAU,qBACVC,WAAY,UACZC,UAAW,UACXC,MAAO,mBACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,qBACVC,SAAU,eACVC,WAAY,UACZC,UAAW,UACXC,MAAO,UACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,wBACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,0BACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,mBACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,iBACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,+BACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,qBACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,2BACVC,SAAU,GACVC,WAAY,UACZC,UAAW,UACXC,MAAO,kBACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,sBACVC,SAAU,iBACVC,WAAY,UACZC,UAAW,UACXC,MAAO,qBACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,IAErB,CACIhC,GAAI,KACJC,SAAU,yBACVC,SAAU,oBACVC,WAAY,UACZC,UAAW,UACXC,MAAO,uBACPC,KAAM,iBACNkB,YAAa,2sBACbC,aAAc,2cACdC,aAAc,6EACdC,YAAa,qCACbC,KAAM,4KACNC,WAAY,+CACZC,YAAa,8CACbC,gBAAiB,GACjBC,gBAAiB,MC9NdC,EAjDK,SAAAhD,GAAU,IAEpBiD,EAZU,SAACC,GAEjB,IADA,IAAIC,EAAiB,IAAMD,EAAQE,cAC1BC,EAAI,EAAGA,EAAIC,EAAYhB,SAASiB,OAAQF,IAE7C,GADAG,QAAQC,IAAIH,EAAYhB,SAASe,IAC7BF,IAAmBG,EAAYhB,SAASe,GAAGhC,KAC3C,OAAOiC,EAAYhB,SAASe,GAObK,CADHC,cAAZT,SAEF3B,EAAS,CACXC,cAAe,CACXC,gBAAiBwB,EAAe/B,YAEpCQ,kBAAmB,CACfC,MAAOsB,EAAe9B,WAE1ByC,qBAAsB,CAClBnC,gBAAiBwB,EAAe9B,UAChCQ,MAAOsB,EAAe/B,YAE1B2C,oBAAqB,CACjBC,iBAAkBb,EAAe9B,YAIrC,OACI,yBAAKlB,UAAU,gBAAgB2B,MAAOL,EAAOC,eACzC,yBAAKvB,UAAU,cACX,kBAAC,IAAD,CAAMM,GAAG,IAAIN,UAAU,eACnB,yBAAKA,UAAU,YAAY2B,MAAOL,EAAOsC,sBACzC,yBAAK5D,UAAU,YAAY2B,MAAOL,EAAOqC,sBAAzC,SAEJ,wBAAI3D,UAAU,eAAe2B,MAAOL,EAAOG,mBAAoBuB,EAAe7B,QAElF,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,wBAAInB,UAAU,qBAAd,iBACA,uBAAGA,UAAU,eAAegD,EAAeV,aAC3C,wBAAItC,UAAU,qBAAd,kBACA,uBAAGA,UAAU,eAAegD,EAAeT,cAC3C,wBAAIvC,UAAU,qBAAd,kBACA,uBAAGA,UAAU,eAAegD,EAAeR,cAC3C,wBAAIxC,UAAU,uBAAsB,uBAAG8D,KAAMd,EAAeL,YAAxB,sBACpC,wBAAI3C,UAAU,uBAAsB,uBAAG8D,KAAMd,EAAeJ,aAAxB,kBAExC,kBAAC,EAAD,KACI,yBAAK5C,UAAU,yBACX,yBAAKA,UAAU,eAAeG,IAAK6C,EAAejC,SAAUX,IAAK4C,EAAehC,gBCrC7F+C,G,MAdS,SAAAhE,GAEhB,OACI,yBAAKC,UAAU,iBACX,wBAAIA,UAAU,aAAaD,EAAMiE,WACjC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,2BAAIjE,EAAMkE,eC6BnBC,E,iLA7BX,OACI,kBAAC,IAAD,KACA,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAAC/C,KAA+B,KACpC,kBAAC,EAAD,KACI,kBAAC,EAAD,QAGZ,kBAAC,IAAD,CAAOA,KAA+B,UAClC,kBAAC,EAAD,CAAiB4C,UAAU,wBAAwBC,SAAS,oyBAEhE,kBAAC,IAAD,CAAO7C,KAA+B,aAClC,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAA+B,YAClC,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAA+B,aAClC,kBAAC,EAAD,c,GAtBFgD,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,mB","file":"static/js/main.aa9f60ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nconst Wrapper = props => {\r\n    return (\r\n        <div className=\"wrapper\">{props.children}</div>\r\n    )\r\n};\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Logo = props => {\r\n    return (\r\n        <div className=\"logoContainer\">\r\n            <img className=\"navigationLogo\" src=\"images/logoThin.svg\" alt=\"logo showing white capital 'L' with thin white border\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './style.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst MenuItem = props => {\r\n    return (\r\n        <li className=\"menuItem\"><Link to={props.linkPath}>{props.linkTitle}</Link></li>\r\n    )\r\n};\r\n\r\nexport default MenuItem;","import React from 'react';\r\nimport './style.css';\r\nimport MenuItem from '../MenuItem';\r\n\r\nconst NavigationMenu = props => {\r\n    return (\r\n        <ul className=\"navigationMenu\">\r\n            <MenuItem linkTitle='Home' linkPath='/'/>\r\n            <MenuItem linkTitle='About' linkPath='/about'/>\r\n            <MenuItem linkTitle='Projects' linkPath='/projects'/>\r\n            <MenuItem linkTitle='Contact' linkPath='/contact'/>\r\n            {props.children}\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default NavigationMenu;","import React from 'react';\r\nimport './style.css';\r\n\r\n\r\n\r\nconst IntroStatement = props => {\r\n    return (\r\n        <div className=\"introContainer\">\r\n            <h2 className=\"textTitle\">Hi, I'm Lexi, a detail-oriented Front End Web Developer known for delivering responsive, cross browser compatible applications that balance performance and design with overall user experience. Certificate in Full Stack Web Development from the University of Washington and strong skills in HTML, CSS and JavaScript.</h2>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default IntroStatement;","import React from 'react';\r\nimport './style.css';\r\nimport Logo from '../Logo';\r\nimport NavigationMenu from '../NavigationMenu';\r\nimport IntroStatement from '../IntroStatement';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"menuContainer\">\r\n                <Logo/>\r\n                <NavigationMenu/>\r\n            </div>\r\n            <IntroStatement/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst FlexContainer = props => {\r\n    return (\r\n        <div className=\"flexContainer\">{props.children}</div>\r\n    )\r\n};\r\n\r\nexport default FlexContainer;","export default {\r\n    hexTiles: [\r\n        {\r\n            //cutoff\r\n            id: '1',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#FC354C',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '2',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#041232',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '3',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#0072bb',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '4',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#cbc5ef',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '5',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#0cb2ba',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '6',\r\n            imageSrc: 'images/burger.svg',\r\n            imageAlt: 'double decker burger icon',\r\n            background: '#45bce5',\r\n            textColor: '#f8f7f7',\r\n            title: 'Eat Da Burger',\r\n            path: '/eat-da-burger'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '7',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#FC354C',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '8',\r\n            imageSrc: 'images/pawPrint.svg',\r\n            imageAlt: 'dog paw print icon',\r\n            background: '#b5ca30',\r\n            textColor: '#0F0F0D',\r\n            title: 'Dog Breed Guessing Game',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '9',\r\n            imageSrc: 'images/packIt.svg',\r\n            imageAlt: '',\r\n            background: '#680a4d',\r\n            textColor: '#f8f7f7',\r\n            title: 'Pack It!',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '10',\r\n            imageSrc: 'images/gifGenerator.svg',\r\n            imageAlt: 'gif generator icon',\r\n            background: '#041232',\r\n            textColor: '#f8f7f7',\r\n            title: 'GIF Generator',\r\n            path: '/'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '11',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#041232',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '12',\r\n            imageSrc: 'images/urbanPrairieWheat.svg',\r\n            imageAlt: '',\r\n            background: '#0072bb',\r\n            textColor: '#f8f7f7',\r\n            title: 'Urban Prairie Homes',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '13',\r\n            imageSrc: 'images/swissFavicon.svg',\r\n            imageAlt: '',\r\n            background: '#b5ca30',\r\n            textColor: '#0F0F0D',\r\n            title: 'Swiss Memory Game',\r\n            path: '/'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '14',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#cbc5ef',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '15',\r\n            imageSrc: 'images/friendFinder.svg',\r\n            imageAlt: 'friend finder icon',\r\n            background: '#680a4d',\r\n            textColor: '#f8f7f7',\r\n            title: 'Friend Finder',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '16',\r\n            imageSrc: 'images/threeScoreDev.svg',\r\n            imageAlt: '',\r\n            background: '#cbc5ef',\r\n            textColor: '#0F0F0D',\r\n            title: 'Three Score Development',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '17',\r\n            imageSrc: 'images/greenCrystal.svg',\r\n            imageAlt: 'green crystal icon',\r\n            background: '#FC354C',\r\n            textColor: '#f8f7f7',\r\n            title: 'Crystal Counting',\r\n            path: '/'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '18',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#0cb2ba',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '19',\r\n            imageSrc: 'images/bri-spy.svg',\r\n            imageAlt: 'bri-spy icon',\r\n            background: '#FC354C',\r\n            textColor: '#f8f7f7',\r\n            title: 'bri-SPY',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '20',\r\n            imageSrc: 'images/chapterToo.svg',\r\n            imageAlt: '',\r\n            background: '#041232',\r\n            textColor: '#f8f7f7',\r\n            title: 'Chapter Too Travel Blog',\r\n            path: '/'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '21',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#0cb2ba',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '22',\r\n            imageSrc: 'images/train.svg',\r\n            imageAlt: '',\r\n            background: '#cbc5ef',\r\n            textColor: '#0F0F0D',\r\n            title: 'Train Schedule',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '23',\r\n            imageSrc: 'images/somethingBorrowed.svg',\r\n            imageAlt: '',\r\n            background: '#45bce5',\r\n            textColor: '#f8f7f7',\r\n            title: 'Something Borrowed',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '24',\r\n            imageSrc: 'images/threeScoreRub.svg',\r\n            imageAlt: '',\r\n            background: '#0072bb',\r\n            textColor: '#f8f7f7',\r\n            title: 'Three Score Rub',\r\n            path: '/'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '25',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#b5ca30',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '26',\r\n            imageSrc: 'images/sawblade.svg',\r\n            imageAlt: 'saw blade icon',\r\n            background: '#0cb2ba',\r\n            textColor: '#f8f7f7',\r\n            title: 'Woodworking Trivia',\r\n            path: '/'\r\n        },\r\n        {\r\n            id: '27',\r\n            imageSrc: 'images/crystalBall.svg',\r\n            imageAlt: 'crystal ball icon',\r\n            background: '#680a4d',\r\n            textColor: '#f8f7f7',\r\n            title: 'Letter Guessing Game',\r\n            path: '/'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '28',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#041232',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '29',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#FC354C',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '30',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#b5ca30',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        },\r\n        {\r\n            //cutoff\r\n            id: '31',\r\n            imageSrc: '',\r\n            imageAlt: '',\r\n            background: '#45bce5',\r\n            textColor: '#f8f7f7',\r\n            title: '',\r\n            path: '/'\r\n        }\r\n        //end on multiple of 7n+3 or 7n\r\n    ]\r\n}","import React from 'react';\r\nimport './style.css';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Hexagon = props => {\r\n    const styles = {\r\n        importedColor: {\r\n            backgroundColor: props.background\r\n        },\r\n        importedTextColor: {\r\n            color: props.textColor\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"hexagonContainer\">\r\n            <div className=\"outerHexagonMask\">\r\n                <div className=\"innerHexagonMask\" style={styles.importedColor}>\r\n                    <Link to={props.link} id={props.id} className=\"hexChild\">\r\n                        <h3 className=\"hexTitle\" style={styles.importedTextColor}>\r\n                            {props.title}\r\n                        </h3>\r\n                        <div className=\"hexImageContainer\">\r\n                            <img className=\"hexImage\" src={props.imageSrc} alt={props.imageAlt}/>\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Hexagon;","import React from 'react';\r\nimport './style.css';\r\nimport hexTiles from '../../constants/hexTiles';\r\nimport Hexagon from '../Hexagon';\r\n\r\nconst HexagonGrid = props => {\r\n    let content = hexTiles.hexTiles.map(hexTile => (\r\n        <Hexagon\r\n            id={hexTile.id}\r\n            key={hexTile.id}\r\n            imageSrc={hexTile.imageSrc}\r\n            imageAlt={hexTile.imageAlt}\r\n            background={hexTile.background}\r\n            textColor={hexTile.textColor}\r\n            title={hexTile.title}\r\n            link={hexTile.path}\r\n        />\r\n    ));\r\n    return (\r\n        <div className=\"hexagonGrid\">\r\n            {content}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HexagonGrid;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst ResumeInfoBar = props => {\r\n    return (\r\n        <div className=\"resumeInfoContainer\">{props.children}</div>\r\n    )\r\n};\r\n\r\nexport default ResumeInfoBar;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst FlexColumnContainer = props => {\r\n    return (\r\n        <div className=\"flexColumnContainer\">{props.children}</div>\r\n    )\r\n};\r\n\r\nexport default FlexColumnContainer;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst EqualColumn = props => {\r\n    return (\r\n        <div className=\"equalColumn\">{props.children}</div>\r\n    )\r\n};\r\n\r\nexport default EqualColumn;","export default {\r\n    projects: [\r\n        {\r\n            id: '6',\r\n            imageSrc: 'images/burger.svg',\r\n            imageAlt: 'double decker burger icon',\r\n            background: '#45bce5',\r\n            textColor: '#f8f7f7',\r\n            title: 'Eat Da Burger',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '8',\r\n            imageSrc: 'images/pawPrint.svg',\r\n            imageAlt: 'dog paw print icon',\r\n            background: '#b5ca30',\r\n            textColor: '#0F0F0D',\r\n            title: 'Dog Breed Guessing Game',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '9',\r\n            imageSrc: 'images/packIt.svg',\r\n            imageAlt: '',\r\n            background: '#680a4d',\r\n            textColor: '#f8f7f7',\r\n            title: 'Pack It!',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '10',\r\n            imageSrc: 'images/gifGenerator.svg',\r\n            imageAlt: 'gif generator icon',\r\n            background: '#041232',\r\n            textColor: '#f8f7f7',\r\n            title: 'GIF Generator',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '12',\r\n            imageSrc: 'images/urbanPrairieWheat.svg',\r\n            imageAlt: '',\r\n            background: '#0072bb',\r\n            textColor: '#f8f7f7',\r\n            title: 'Urban Prairie Homes',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '13',\r\n            imageSrc: 'images/swissFavicon.svg',\r\n            imageAlt: '',\r\n            background: '#b5ca30',\r\n            textColor: '#0F0F0D',\r\n            title: 'Swiss Memory Game',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '15',\r\n            imageSrc: 'images/friendFinder.svg',\r\n            imageAlt: 'friend finder icon',\r\n            background: '#680a4d',\r\n            textColor: '#f8f7f7',\r\n            title: 'Friend Finder',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '16',\r\n            imageSrc: 'images/threeScoreDev.svg',\r\n            imageAlt: '',\r\n            background: '#cbc5ef',\r\n            textColor: '#0F0F0D',\r\n            title: 'Three Score Development',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '17',\r\n            imageSrc: 'images/greenCrystal.svg',\r\n            imageAlt: 'green crystal icon',\r\n            background: '#FC354C',\r\n            textColor: '#f8f7f7',\r\n            title: 'Crystal Counting',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '19',\r\n            imageSrc: 'images/bri-spy.svg',\r\n            imageAlt: 'bri-spy icon',\r\n            background: '#FC354C',\r\n            textColor: '#f8f7f7',\r\n            title: 'bri-SPY',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '20',\r\n            imageSrc: 'images/chapterToo.svg',\r\n            imageAlt: '',\r\n            background: '#041232',\r\n            textColor: '#f8f7f7',\r\n            title: 'Chapter Too Travel Blog',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '22',\r\n            imageSrc: 'images/train.svg',\r\n            imageAlt: '',\r\n            background: '#cbc5ef',\r\n            textColor: '#0F0F0D',\r\n            title: 'Train Schedule',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '23',\r\n            imageSrc: 'images/somethingBorrowed.svg',\r\n            imageAlt: '',\r\n            background: '#45bce5',\r\n            textColor: '#f8f7f7',\r\n            title: 'Something Borrowed',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '24',\r\n            imageSrc: 'images/threeScoreRub.svg',\r\n            imageAlt: '',\r\n            background: '#0072bb',\r\n            textColor: '#f8f7f7',\r\n            title: 'Three Score Rub',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '26',\r\n            imageSrc: 'images/sawblade.svg',\r\n            imageAlt: 'saw blade icon',\r\n            background: '#0cb2ba',\r\n            textColor: '#f8f7f7',\r\n            title: 'Woodworking Trivia',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        },\r\n        {\r\n            id: '27',\r\n            imageSrc: 'images/crystalBall.svg',\r\n            imageAlt: 'crystal ball icon',\r\n            background: '#680a4d',\r\n            textColor: '#f8f7f7',\r\n            title: 'Letter Guessing Game',\r\n            path: '/eat-da-burger',\r\n            description: 'Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the \\'Ready to Eat\\' section and devoured burgers in the \\'Devoured\\' section. There is also a form to allow them to input the name of new burgers they\\'d like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a \\'Devour It!\\' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the \\'Devoured\\' section of the page.',\r\n            organization: 'This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.',\r\n            technologies: 'HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku',\r\n            npmPackages: 'express, express-handlebars, mysql',\r\n            role: 'Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.',\r\n            githubLink: 'https://github.com/lexi-winstanley/BurgerLog',\r\n            projectLink: 'https://nameless-taiga-35229.herokuapp.com/',\r\n            projectImageSrc: '',\r\n            projectImageAlt: ''\r\n        }\r\n    ]\r\n}","import React from 'react';\r\nimport './style.css';\r\nimport FlexColumnContainer from '../FlexColumnContainer';\r\nimport EqualColumn from '../EqualColumn';\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport projectList from '../../constants/projects';\r\n\r\nconst findProject = (project) => {\r\n    let desiredProject = '/' + project.toLowerCase();\r\n    for (let i = 0; i < projectList.projects.length; i++) {\r\n        console.log(projectList.projects[i]);\r\n        if (desiredProject === projectList.projects[i].path) {\r\n            return projectList.projects[i];\r\n        }\r\n    }\r\n};\r\n\r\nconst ProjectPage = props => {\r\n    const { project } = useParams();\r\n    const currentProject = findProject(project);\r\n    const styles = {\r\n        importedColor: {\r\n            backgroundColor: currentProject.background\r\n        },\r\n        importedTextColor: {\r\n            color: currentProject.textColor\r\n        },\r\n        importedButtonColors: {\r\n            backgroundColor: currentProject.textColor,\r\n            color: currentProject.background\r\n        },\r\n        importedArrowColors: {\r\n            borderRightColor: currentProject.textColor,\r\n        },\r\n    };\r\n\r\n        return (\r\n            <div className=\"pageContainer\" style={styles.importedColor}>\r\n                <div className=\"pageBanner\" >\r\n                    <Link to='/' className=\"closeButton\">\r\n                        <div className=\"arrowBack\" style={styles.importedArrowColors}></div>\r\n                        <div className=\"arrowText\" style={styles.importedButtonColors}>Back</div>\r\n                    </Link>\r\n                    <h1 className=\"projectTitle\" style={styles.importedTextColor}>{currentProject.title}</h1>\r\n                </div>\r\n                <FlexColumnContainer>\r\n                    <EqualColumn>\r\n                        <h2 className=\"projectSubheading\">Description: </h2>\r\n                        <p className=\"projectText\">{currentProject.description}</p>\r\n                        <h2 className=\"projectSubheading\">Organization: </h2>\r\n                        <p className=\"projectText\">{currentProject.organization}</p>\r\n                        <h2 className=\"projectSubheading\">Technologies: </h2>\r\n                        <p className=\"projectText\">{currentProject.technologies}</p>\r\n                        <h2 className=\"projectExternalLink\"><a href={currentProject.githubLink}>Github Repository</a></h2>\r\n                        <h2 className=\"projectExternalLink\"><a href={currentProject.projectLink}>Live Project</a></h2>\r\n                    </EqualColumn>\r\n                    <EqualColumn>\r\n                        <div className=\"projectImageContainer\">\r\n                            <img className=\"projectImage\" src={currentProject.imageSrc} alt={currentProject.imageAlt}/>\r\n                        </div>\r\n                    </EqualColumn>\r\n                </FlexColumnContainer>\r\n            </div>\r\n        );\r\n    };\r\n\r\nexport default ProjectPage;","import React from 'react';\r\nimport './style.css';\r\nimport FlexColumnContainer from '../FlexColumnContainer';\r\nimport EqualColumn from '../EqualColumn';\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport projectList from '../../constants/projects';\r\n\r\nconst PageInfoSection = props => {\r\n\r\n        return (\r\n            <div className=\"pageContainer\">\r\n                <h1 className=\"pageTitle\">{props.pageTitle}</h1>\r\n                <FlexColumnContainer>\r\n                    <EqualColumn>\r\n                        <p>{props.pageInfo}</p>\r\n                    </EqualColumn>\r\n                </FlexColumnContainer>\r\n            </div>\r\n        );\r\n    };\r\n\r\nexport default PageInfoSection;","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper';\nimport Header from './components/Header';\nimport FlexContainer from './components/FlexContainer';\nimport HexagonGrid from './components/HexagonGrid';\nimport ResumeInfoBar from './components/ResumeInfoBar';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport ProjectPage from './components/ProjectPage';\nimport FlexColumnContainer from './components/FlexColumnContainer';\nimport EqualColumn from './components/EqualColumn';\nimport PageInfoSection from './components/PageInfoSection';\nclass App extends Component {\n  render() {\n    return (\n        <Router>\n        <Wrapper>\n            <Header/>\n            <Switch>\n                <Route exact path={process.env.PUBLIC_URL + '/'}>\n                        <FlexContainer>\n                            <HexagonGrid/>\n                        </FlexContainer>\n                </Route>\n                <Route path={process.env.PUBLIC_URL + '/about'}>\n                    <PageInfoSection pageTitle='About Lexi Winstanley' pageInfo='Motivated and energetic Front End Web Developer with Certificate in Full Stack Web Development from University of Washington Professional & Continuing Education, strong skills in HTML, CSS and JavaScript and additional experience with React, React Native, MySQL and MongoDB. Leveraging creative problem solving, productive collaboration and a passion for accessibility gained from a background in health care to create impactful web experiences for all users. Detail-oriented individual known for delivering responsive, cross browser compatible applications that balance performance and design with overall user experience. Recognized in collaborative settings as a creative, hardworking teammate motivated to meet all deliverables and requirements while ensuring a positive experience for others. '/>\n                </Route>\n                <Route path={process.env.PUBLIC_URL + '/projects'}>\n                    <ResumeInfoBar/>\n                </Route>\n                <Route path={process.env.PUBLIC_URL + '/contact'}>\n                    <ResumeInfoBar/>\n                </Route>\n                <Route path={process.env.PUBLIC_URL + '/:project'}>\n                    <ProjectPage/>\n                </Route>\n            </Switch>\n        </Wrapper>\n        </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}