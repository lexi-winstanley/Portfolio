(this.webpackJsonpportfolioreact=this.webpackJsonpportfolioreact||[]).push([[0],Array(22).concat([function(e,t,a){e.exports=a(48)},,,,,function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},,,,,,function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){"use strict";a.r(t);var i=a(0),r=a.n(i),o=a(14),n=a.n(o),s=(a(27),a(15)),d=a(16),l=a(20),c=a(17),h=a(21),g=(a(28),a(29),function(e){return r.a.createElement("div",{className:"wrapper"},e.children)}),p=(a(30),a(31),function(e){return r.a.createElement("div",{className:"logoContainer"},r.a.createElement("img",{className:"navigationLogo",src:"images/logoThin.svg",alt:"logo showing white capital 'L' with thin white border"}))}),u=(a(32),a(33),a(5)),m=function(e){return r.a.createElement("li",{className:"menuItem"},r.a.createElement(u.b,{to:e.linkPath},e.linkTitle))},b=function(e){return r.a.createElement("ul",{className:"navigationMenu"},r.a.createElement(m,{linkTitle:"Home",linkPath:"/"}),r.a.createElement(m,{linkTitle:"About",linkPath:"/about"}),r.a.createElement(m,{linkTitle:"Projects",linkPath:"/projects"}),r.a.createElement(m,{linkTitle:"Contact",linkPath:"/contact"}),e.children)},f=(a(39),function(e){return r.a.createElement("div",{className:"introContainer"},r.a.createElement("h2",{className:"textTitle"},"Hi, I'm Lexi, a detail-oriented Front End Web Developer known for delivering responsive, cross browser compatible applications that balance performance and design with overall user experience. Certificate in Full Stack Web Development from the University of Washington and strong skills in HTML, CSS and JavaScript."))}),y=function(e){return r.a.createElement("div",{className:"header"},r.a.createElement("div",{className:"menuContainer"},r.a.createElement(p,null),r.a.createElement(b,null)),r.a.createElement(f,null))},v=(a(40),function(e){return r.a.createElement("div",{className:"flexContainer"},e.children)}),w=(a(41),{hexTiles:[{id:"1",imageSrc:"",imageAlt:"",background:"#FC354C",textColor:"#f8f7f7",title:"",path:"/"},{id:"2",imageSrc:"",imageAlt:"",background:"#041232",textColor:"#f8f7f7",title:"",path:"/"},{id:"3",imageSrc:"",imageAlt:"",background:"#0072bb",textColor:"#f8f7f7",title:"",path:"/"},{id:"4",imageSrc:"",imageAlt:"",background:"#cbc5ef",textColor:"#f8f7f7",title:"",path:"/"},{id:"5",imageSrc:"",imageAlt:"",background:"#0cb2ba",textColor:"#f8f7f7",title:"",path:"/"},{id:"6",imageSrc:"images/burger.svg",imageAlt:"double decker burger icon",background:"#45bce5",textColor:"#f8f7f7",title:"Eat Da Burger",path:"/eat-da-burger"},{id:"7",imageSrc:"",imageAlt:"",background:"#FC354C",textColor:"#f8f7f7",title:"",path:"/"},{id:"8",imageSrc:"images/pawPrint.svg",imageAlt:"dog paw print icon",background:"#b5ca30",textColor:"#0F0F0D",title:"Dog Breed Guessing Game",path:"/"},{id:"9",imageSrc:"images/packIt.svg",imageAlt:"",background:"#680a4d",textColor:"#f8f7f7",title:"Pack It!",path:"/"},{id:"10",imageSrc:"images/gifGenerator.svg",imageAlt:"gif generator icon",background:"#041232",textColor:"#f8f7f7",title:"GIF Generator",path:"/"},{id:"11",imageSrc:"",imageAlt:"",background:"#041232",textColor:"#f8f7f7",title:"",path:"/"},{id:"12",imageSrc:"images/urbanPrairieWheat.svg",imageAlt:"",background:"#0072bb",textColor:"#f8f7f7",title:"Urban Prairie Homes",path:"/"},{id:"13",imageSrc:"images/swissFavicon.svg",imageAlt:"",background:"#b5ca30",textColor:"#0F0F0D",title:"Swiss Memory Game",path:"/"},{id:"14",imageSrc:"",imageAlt:"",background:"#cbc5ef",textColor:"#f8f7f7",title:"",path:"/"},{id:"15",imageSrc:"images/friendFinder.svg",imageAlt:"friend finder icon",background:"#680a4d",textColor:"#f8f7f7",title:"Friend Finder",path:"/"},{id:"16",imageSrc:"images/threeScoreDev.svg",imageAlt:"",background:"#cbc5ef",textColor:"#0F0F0D",title:"Three Score Development",path:"/"},{id:"17",imageSrc:"images/greenCrystal.svg",imageAlt:"green crystal icon",background:"#FC354C",textColor:"#f8f7f7",title:"Crystal Counting",path:"/"},{id:"18",imageSrc:"",imageAlt:"",background:"#0cb2ba",textColor:"#f8f7f7",title:"",path:"/"},{id:"19",imageSrc:"images/bri-spy.svg",imageAlt:"bri-spy icon",background:"#FC354C",textColor:"#f8f7f7",title:"bri-SPY",path:"/"},{id:"20",imageSrc:"images/chapterToo.svg",imageAlt:"",background:"#041232",textColor:"#f8f7f7",title:"Chapter Too Travel Blog",path:"/"},{id:"21",imageSrc:"",imageAlt:"",background:"#0cb2ba",textColor:"#f8f7f7",title:"",path:"/"},{id:"22",imageSrc:"images/train.svg",imageAlt:"",background:"#cbc5ef",textColor:"#0F0F0D",title:"Train Schedule",path:"/"},{id:"23",imageSrc:"images/somethingBorrowed.svg",imageAlt:"",background:"#45bce5",textColor:"#f8f7f7",title:"Something Borrowed",path:"/"},{id:"24",imageSrc:"images/threeScoreRub.svg",imageAlt:"",background:"#0072bb",textColor:"#f8f7f7",title:"Three Score Rub",path:"/"},{id:"25",imageSrc:"",imageAlt:"",background:"#b5ca30",textColor:"#f8f7f7",title:"",path:"/"},{id:"26",imageSrc:"images/sawblade.svg",imageAlt:"saw blade icon",background:"#0cb2ba",textColor:"#f8f7f7",title:"Woodworking Trivia",path:"/"},{id:"27",imageSrc:"images/crystalBall.svg",imageAlt:"crystal ball icon",background:"#680a4d",textColor:"#f8f7f7",title:"Letter Guessing Game",path:"/"},{id:"28",imageSrc:"",imageAlt:"",background:"#041232",textColor:"#f8f7f7",title:"",path:"/"},{id:"29",imageSrc:"",imageAlt:"",background:"#FC354C",textColor:"#f8f7f7",title:"",path:"/"},{id:"30",imageSrc:"",imageAlt:"",background:"#b5ca30",textColor:"#f8f7f7",title:"",path:"/"},{id:"31",imageSrc:"",imageAlt:"",background:"#45bce5",textColor:"#f8f7f7",title:"",path:"/"}]}),S=(a(42),function(e){var t={importedColor:{backgroundColor:e.background},importedTextColor:{color:e.textColor}};return r.a.createElement("div",{className:"hexagonContainer"},r.a.createElement("div",{className:"outerHexagonMask"},r.a.createElement("div",{className:"innerHexagonMask",style:t.importedColor},r.a.createElement(u.b,{to:e.link,id:e.id,className:"hexChild"},r.a.createElement("h3",{className:"hexTitle",style:t.importedTextColor},e.title),r.a.createElement("div",{className:"hexImageContainer"},r.a.createElement("img",{className:"hexImage",src:e.imageSrc,alt:e.imageAlt}))))))}),k=function(e){var t=w.hexTiles.map((function(e){return r.a.createElement(S,{id:e.id,key:e.id,imageSrc:e.imageSrc,imageAlt:e.imageAlt,background:e.background,textColor:e.textColor,title:e.title,link:e.path})}));return r.a.createElement("div",{className:"hexagonGrid"},t)},C=(a(43),function(e){return r.a.createElement("div",{className:"resumeInfoContainer"},e.children)}),M=a(6),x=(a(44),a(45),function(e){return r.a.createElement("div",{className:"flexColumnContainer"},e.children)}),E=(a(46),function(e){return r.a.createElement("div",{className:"equalColumn"},e.children)}),L={projects:[{id:"6",imageSrc:"images/burger.svg",imageAlt:"double decker burger icon",background:"#45bce5",textColor:"#f8f7f7",title:"Eat Da Burger",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"8",imageSrc:"images/pawPrint.svg",imageAlt:"dog paw print icon",background:"#b5ca30",textColor:"#0F0F0D",title:"Dog Breed Guessing Game",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"9",imageSrc:"images/packIt.svg",imageAlt:"",background:"#680a4d",textColor:"#f8f7f7",title:"Pack It!",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"10",imageSrc:"images/gifGenerator.svg",imageAlt:"gif generator icon",background:"#041232",textColor:"#f8f7f7",title:"GIF Generator",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"12",imageSrc:"images/urbanPrairieWheat.svg",imageAlt:"",background:"#0072bb",textColor:"#f8f7f7",title:"Urban Prairie Homes",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"13",imageSrc:"images/swissFavicon.svg",imageAlt:"",background:"#b5ca30",textColor:"#0F0F0D",title:"Swiss Memory Game",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"15",imageSrc:"images/friendFinder.svg",imageAlt:"friend finder icon",background:"#680a4d",textColor:"#f8f7f7",title:"Friend Finder",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"16",imageSrc:"images/threeScoreDev.svg",imageAlt:"",background:"#cbc5ef",textColor:"#0F0F0D",title:"Three Score Development",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"17",imageSrc:"images/greenCrystal.svg",imageAlt:"green crystal icon",background:"#FC354C",textColor:"#f8f7f7",title:"Crystal Counting",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"19",imageSrc:"images/bri-spy.svg",imageAlt:"bri-spy icon",background:"#FC354C",textColor:"#f8f7f7",title:"bri-SPY",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"20",imageSrc:"images/chapterToo.svg",imageAlt:"",background:"#041232",textColor:"#f8f7f7",title:"Chapter Too Travel Blog",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"22",imageSrc:"images/train.svg",imageAlt:"",background:"#cbc5ef",textColor:"#0F0F0D",title:"Train Schedule",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"23",imageSrc:"images/somethingBorrowed.svg",imageAlt:"",background:"#45bce5",textColor:"#f8f7f7",title:"Something Borrowed",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"24",imageSrc:"images/threeScoreRub.svg",imageAlt:"",background:"#0072bb",textColor:"#f8f7f7",title:"Three Score Rub",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"26",imageSrc:"images/sawblade.svg",imageAlt:"saw blade icon",background:"#0cb2ba",textColor:"#f8f7f7",title:"Woodworking Trivia",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""},{id:"27",imageSrc:"images/crystalBall.svg",imageAlt:"crystal ball icon",background:"#680a4d",textColor:"#f8f7f7",title:"Letter Guessing Game",path:"/eat-da-burger",description:"Eat Da Burger is a web application deployed with Heroku. On home page load, the user is presented with any existing burgers in the MySQL database, non-devoured burgers in the 'Ready to Eat' section and devoured burgers in the 'Devoured' section. There is also a form to allow them to input the name of new burgers they'd like to eat. Once they hit submit, the new burger is added to the MySQL database as ready to eat and the page is reloaded so the burger is displayed in the appropriate section with a 'Devour It!' button. If the user clicks this button the devoured state for that burger is updated in the MySQL database and the page is reloaded showing the burger moved to the 'Devoured' section of the page.",organization:"This application is organized using the Model-View-Controller (MVC) design pattern. An Object Relational Mapper (ORM) is defined with functions to handle the MySQL queries and the model further defines those functions specific to the Eat Da Burger application. The routing is defined in the controller and the functions are called as appropriate, once database data is gathered or altered, the view updates from the Handlebars template using a page reload.",technologies:"HTML, Handlebars, CSS, JavaScript, jQuery, MySQL, Node.js, Express, Heroku",npmPackages:"express, express-handlebars, mysql",role:"Sole developer with functionality requirements provided by UW Coding Bootcamp/Trilogy Education Services. Responsible for website design and creation of custom graphics.",githubLink:"https://github.com/lexi-winstanley/BurgerLog",projectLink:"https://nameless-taiga-35229.herokuapp.com/",projectImageSrc:"",projectImageAlt:""}]},j=function(e){var t=function(e){for(var t="/"+e.toLowerCase(),a=0;a<L.projects.length;a++)if(console.log(L.projects[a]),t===L.projects[a].path)return L.projects[a]}(Object(M.f)().project),a={importedColor:{backgroundColor:t.background},importedTextColor:{color:t.textColor},importedButtonColors:{backgroundColor:t.textColor,color:t.background},importedArrowColors:{borderRightColor:t.textColor}};return r.a.createElement("div",{className:"pageContainer",style:a.importedColor},r.a.createElement("div",{className:"pageBanner"},r.a.createElement(u.b,{to:"/",className:"closeButton"},r.a.createElement("div",{className:"arrowBack",style:a.importedArrowColors}),r.a.createElement("div",{className:"arrowText",style:a.importedButtonColors},"Back")),r.a.createElement("h1",{className:"projectTitle",style:a.importedTextColor},t.title)),r.a.createElement(x,null,r.a.createElement(E,null,r.a.createElement("h2",{className:"projectSubheading"},"Description: "),r.a.createElement("p",{className:"projectText"},t.description),r.a.createElement("h2",{className:"projectSubheading"},"Organization: "),r.a.createElement("p",{className:"projectText"},t.organization),r.a.createElement("h2",{className:"projectSubheading"},"Technologies: "),r.a.createElement("p",{className:"projectText"},t.technologies),r.a.createElement("h2",{className:"projectExternalLink"},r.a.createElement("a",{href:t.githubLink},"Github Repository")),r.a.createElement("h2",{className:"projectExternalLink"},r.a.createElement("a",{href:t.projectLink},"Live Project"))),r.a.createElement(E,null,r.a.createElement("div",{className:"projectImageContainer"},r.a.createElement("img",{className:"projectImage",src:t.imageSrc,alt:t.imageAlt})))))},T=(a(47),function(e){return r.a.createElement("div",{className:"pageContainer"},r.a.createElement("h1",{className:"pageTitle"},e.pageTitle),r.a.createElement(x,null,r.a.createElement(E,null,r.a.createElement("p",null,e.pageInfo))))}),D=function(e){function t(){return Object(s.a)(this,t),Object(l.a)(this,Object(c.a)(t).apply(this,arguments))}return Object(h.a)(t,e),Object(d.a)(t,[{key:"render",value:function(){return r.a.createElement(u.a,null,r.a.createElement(g,null,r.a.createElement(y,null),r.a.createElement(M.c,null,r.a.createElement(M.a,{exact:!0,path:"/"},r.a.createElement(v,null,r.a.createElement(k,null))),r.a.createElement(M.a,{path:"/about"},r.a.createElement(T,{pageTitle:"About Lexi Winstanley",pageInfo:"Motivated and energetic Front End Web Developer with Certificate in Full Stack Web Development from University of Washington Professional & Continuing Education, strong skills in HTML, CSS and JavaScript and additional experience with React, React Native, MySQL and MongoDB. Leveraging creative problem solving, productive collaboration and a passion for accessibility gained from a background in health care to create impactful web experiences for all users. Detail-oriented individual known for delivering responsive, cross browser compatible applications that balance performance and design with overall user experience. Recognized in collaborative settings as a creative, hardworking teammate motivated to meet all deliverables and requirements while ensuring a positive experience for others. "})),r.a.createElement(M.a,{path:"/projects"},r.a.createElement(C,null)),r.a.createElement(M.a,{path:"/contact"},r.a.createElement(C,null)),r.a.createElement(M.a,{path:"/:project"},r.a.createElement(j,null)))))}}]),t}(i.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));n.a.render(r.a.createElement(D,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}]),[[22,1,2]]]);
//# sourceMappingURL=main.aa9f60ef.chunk.js.map